likelihood <- function(distribution, ...) {
parameters <- as.list(match.call(expand.dots = TRUE))
distribution <- paste0(parameters$distribution %||%
"normal", ".likelihood")
lik_fun <- purrr::partial(.f = rlang::as_function(distribution), ...)
return(lik_fun())
}
data_model <- likelihood("student_t", d = mean/sd, n = n)
data_model <- likelihood("student_t", mean/sd, n)
data_model <- likelihood("student_t", mean/sd, n)
data_model <- likelihood(di = "student_t", mean/sd, n)
data_model
data_model <- likelihood(di = "student_t", mean/sd, n)
parameters
match.call
match.call()
match.call(expand.dots = TRUE)
match.call(expand.dots = TRUE)
data_model <- likelihood(distribution = "student_t", d = mean/sd, n=  n)
match.call()
match.call(expand.dots = T)
as.list(match.call(expand.dots = T))
data_model <- likelihood(distribution = "student_t", d = mean/sd, n=  n)
data_model <- likelihood(distribution = "student_t", d = mean/sd, n=  n)
sys.parent()
sys.function(sys.parent())
rlang::sym()
f<- sys.function(sys.parent())
rlang::as_complex(f)
rlang::as_closure(f)
!!!f
rlang::as_closure(f)
data_model <- likelihood(distribution = "student_t", d = mean/sd, n=  n)
f<- sys.function(sys.parent())
match.call(f)
names(f)
match.call(expand.dots = F)
names(match.call(expand.dots = F))
match("distribution",names(match.call(expand.dots = F)))
match("distribution",names(match.call(expand.dots = F)),0l)
match("distribution",names(match.call(expand.dots = F)),0L)
data_model <- likelihood(distribution = "student_t", d = mean/sd, n=  n)
parameters <- as.list(match.call(expand.dots = TRUE))
parameters
distribution <- paste0(parameters$distribution %||%
"normal", ".likelihood")
distribution
call(match.call())
purrr::partial(.f = rlang::as_function(distribution), ...)
library(bayesplay)
library(bayesplay)
library(ggplot2)
library(tidyverse)
data_model <- likelihood("student_t", d = mean/sd, n = n)
data_model <- likelihood("student_t", d = mean/sd, n = n)
data_model <- likelihood("student_t", d = !!!mean/sd, n = !!!n)
data_model <- likelihood("student_t", d = 2, n = 10)
library(bayesplay)
data_model <- likelihood("student_t", d = 2, n = 10)
library(bayesplay)
library(ggplot2)
library(tidyverse)
data_model <- likelihood("student_t", d = 2, n = 10)
data_model <- effect_size.likelihood(mean / sd,n)
data_model <- student_t.likelihood(mean / sd,n)
n = 10
mean = 10
sd = 5
data_model <- likelihood("student_t", d = 2, n = 10)
data_model <- student_t.likelihood(mean / sd,n)
#' Title
#'
#' @param distribution
#' @param ...
#'
#' @return
#' @export
#'
#' @examples
likelihood <- function(distribution, ...) {
parameters <- as.list(match.call(expand.dots = FALSE))
distribution <- paste0(parameters$distribution %||%
"normal", ".likelihood")
lik_fun <- purrr::partial(.f = rlang::as_function(distribution), ...)
return(lik_fun())
}
data_model <- likelihood("student_t", d = 2, n = 10)
data_model <- likelihood(distribution = "student_t", d = 2, n = 10)
data_model
h1 <- prior("cauchy", location = 0, scale = 1)
h0 <- prior("point", 0)
integrate(data_model * h1)  / integrate(data_model * h0)
data_model <- student_t.likelihood(mean / sd,n)
h1 <- prior("cauchy", location = 0, scale = 1)
h0 <- prior("point", 0)
integrate(data_model * h1)  / integrate(data_model * h0)
data_model <- student_t.likelihood(mean / sd,n)
h1 <- prior("cauchy", location = 0, scale = 1)
h0 <- prior("point", 0)
integrate(data_model * h1)  / integrate(data_model * h0)
data_model
#' Title
#'
#' @param ...
#'
#' @return
#' @export
#'
#' @examples
student_t.likelihood <- function(d, n) { # nolint
# TODO:
# Need a way to deal with
# scaled and shifted t distributions
#parameters <- as.list(match.call(expand.dots = TRUE))
#center <- parameters$center
#df <- parameters$df
#scale <- parameters$scale %||% 1
scale = 1
lik_type <- "non-central t"
lik_func <- function(theta) {
dt(x = sqrt(n) * d, df = n - 1, ncp = sqrt(n) * theta)
}
params <- list(d = d, n = n)
desc <-""# paste0("Parameters\nCenter: ", params$center, "\ndf: ", params$df)
new(
Class = "likelihood",
data = list(likelihood_type = "student_t",
parameters = params),
func = lik_func,
marginal = lik_func,
desc = desc,
dist.type = "continuous",
plot = list(
fun = "dt",
params = list(d = d,
n = n)
)
)
}
data_model <- likelihood(distribution = "student_t", d = 2, n = 10)
data_model <- student_t.likelihood(mean / sd,n)
h1 <- prior("cauchy", location = 0, scale = 1)
h0 <- prior("point", 0)
integrate(data_model * h1)  / integrate(data_model * h0)
data_model <- likelihood(distribution = "student_t", d = 2, n = 10)
integrate(data_model * h1)  / integrate(data_model * h0)
data_model <- likelihood(distribution = "student_t", d = 2, n = 10)
h1 <- prior("cauchy", location = 0, scale = 1)
h0 <- prior("point", 0)
integrate(data_model * h1)  / integrate(data_model * h0)
BayesFactor::ttest.tstat(t = mean / (sd / sqrt(n)), n1 =  n, rscale = 1, simple = T)[[1]]
data_model <- likelihood(distribution = "student_t", d = 10/5, n = 10)
data_model <- student_t.likelihood(mean / sd,n)
h1 <- prior("cauchy", location = 0, scale = 1)
h0 <- prior("point", 0)
data_model <- likelihood(distribution = "student_t", d = 10/5, n = 10)
h1 <- prior("cauchy", location = 0, scale = 1)
h0 <- prior("point", 0)
integrate(data_model * h1)  / integrate(data_model * h0)
BayesFactor::ttest.tstat(t = mean / (sd / sqrt(n)), n1 =  n, rscale = 1, simple = T)[[1]]
data_model <- likelihood(distribution = "student_t", d = mean/sd, n = 10)
h1 <- prior("cauchy", location = 0, scale = 1)
h0 <- prior("point", 0)
integrate(data_model * h1)  / integrate(data_model * h0)
data_model <- likelihood(distribution = "student_t", d = mean/sd, n = n)
h1 <- prior("cauchy", location = 0, scale = 1)
h0 <- prior("point", 0)
integrate(data_model * h1)  / integrate(data_model * h0)
integrate(data_model * h1)  / integrate(data_model * h0)
n = 10
mean = 10
sd = 5
data_model <- likelihood(distribution = "student_t", d = mean/sd, n = n)
h1 <- prior("cauchy", location = 0, scale = 1)
h0 <- prior("point", 0)
integrate(data_model * h1)  / integrate(data_model * h0)
library(bayesplay)
n = 10
n = 10
mean = 10
library(bayesplay)
library(ggplot2)
library(tidyverse)
n = 10
library(bayesplay)
library(ggplot2)
library(tidyverse)
mean = 10
sd = 5
data_model <- likelihood(distribution = "student_t", d = mean/sd, n = n)
h1 <- prior("cauchy", location = 0, scale = 1)
h0 <- prior("point", 0)
integrate(data_model * h1)  / integrate(data_model * h0)
BayesFactor::ttest.tstat(t = mean / (sd / sqrt(n)), n1 =  n, rscale = 1, simple = T)[[1]]
data_model <- likelihood(student_t", d = mean/sd, n = n)
data_model <- likelihood("student_t", d = mean/sd, n = n)
data_model <- likelihood("student_t", d = mean/sd, n = n)
data_model <- likelihood(distribution = "student_t", d = mean/sd, n = n)
data_model <- likelihood(distribution = "student_t", d = mean/sd, n = n)
parameters
parameters <- as.list(match.call(expand.dots = FALSE))
parameters
parameters$...
library(bayesplay)
parameters$...
library(bayesplay)
library(ggplot2)
library(tidyverse)
data_model <- likelihood(distribution = "student_t", d = mean/sd, n = n)
library(bayesplay)
data_model <- likelihood(distribution = "student_t", d = mean/sd, n = n)
library(bayesplay)
library(ggplot2)
library(tidyverse)
h1 <- prior("cauchy", location = 0, scale = 1)
h0 <- prior("point", 0)
integrate(data_model * h1)  / integrate(data_model * h0)
data_model
data_model@data
data_model <- likelihood(distribution = "student_t", d = mean/sd, n = n)
as.list(match.call(expand.dots = FALSE))
parameters$...
parameters$
parameters
parameters
parameters <- as.list(match.call(expand.dots = FALSE))
parameters$..
parameters$.
parameters[2]
parameters[1]
parameters[2]
parameters$..
parameters$.
parameters$.$d
call(parameters$.$d)
parent.frame()
parent.frame()$n
parent.frame()
parameters
cl <- match.call()
clk
cl
mf <- match.call(expand.dots = FALSE)
mf
m <- match(c("distribution"), names(mf), 0L)
m
mf <- mf[c(1L, m)]
mf
mf
mf$distribution
m <- match(c("distribution","n","d"), names(mf), 0L)
mf <- mf[c(1L, m)]
mf$distribution
md
m
mf <- eval(mf, parent.frame())
mf
mf
data_model <- likelihood(distribution = "student_t", d = mean/sd, n = n)
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(c("formula", "data", "subset", "weights", "na.action",
"offset"), names(mf), 0L)
mf <- mf[c(1L, m)]
cl
m
mf
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(c("distribution"), names(mf), 0L)
mf <- mf[c(1L, m)]
cl
cl$d
eval(cl$d)
eval(cl$d, envir = parent.frame())
data_model <- likelihood(distribution = "student_t", d = mean/sd, n = n)
data_model <- likelihood(distribution = "student_t", d = mean/sd, n = n)
#' Title
#'
#' @param distribution
#' @param ...
#'
#' @return
#' @export
#'
#' @examples
likelihood <- function(distribution, ...) {
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(c("distribution"), names(mf), 0L)
mf <- mf[c(1L, m)]
parameters <- as.list(match.call(expand.dots = FALSE))
distribution <- paste0(parameters$distribution %||%
"normal", ".likelihood")
lik_fun <- purrr::partial(.f = rlang::as_function(distribution), parameters$...)
return(lik_fun())
}
data_model <- likelihood(distribution = "student_t", d = mean/sd, n = n)
data_model <- likelihood(distribution = "student_t", d = mean/sd, n = n)
h1 <- prior("cauchy", location = 0, scale = 1)
h0 <- prior("point", 0)
integrate(data_model * h1)  / integrate(data_model * h0)
library(bayesplay)
data_model <- likelihood(distribution = "student_t", d = mean/sd, n = n)
data_model <- likelihood(distribution = "student_t", d = mean/sd, n = n)
data_model
data_model$parameters
library(bayesplay)
library(bayesplay)
library(ggplot2)
library(tidyverse)
data_model <- likelihood(distribution = "student_t", d = mean/sd, n = n)
library(bayesplay)
library(ggplot2)
library(tidyverse)
data_model <- likelihood(distribution = "student_t", d = mean/sd, n = n)
h1 <- prior("cauchy", location = 0, scale = 1)
h0 <- prior("point", 0)
integrate(data_model * h1)  / integrate(data_model * h0)
BayesFactor::ttest.tstat(t = mean / (sd / sqrt(n)), n1 =  n, rscale = 1, simple = T)[[1]]
data_model <- likelihood("student_t", d = mean/sd, n = n)
data_model <- likelihood("student_t", d = mean/sd, n = n)
cl <- match.call()
cl
data_model <- likelihood("student_t", d = mean/sd, n = n)
data_model <- likelihood("student_t", d = mean/sd, n = n)
n = 10
mean = 10
sd = 5
data_model <- likelihood("student_t", d = mean/sd, n = n)
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
mf
mf$...
cl
mf
m <- match(c("distribution"), names(mf), 0L)
m
mf <- mf[c(1L, m)]
mf
parameters <- as.list(match.call(expand.dots = FALSE))
parameters
...
match.call()
#' Title
#'
#' @param distribution
#' @param ...
#'
#' @return
#' @export
#'
#' @examples
likelihood <- function(distribution, d, n) {
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(c("distribution"), names(mf), 0L)
mf <- mf[c(1L, m)]
parameters <- as.list(match.call(expand.dots = FALSE))
distribution <- paste0(parameters$distribution %||%
"normal", ".likelihood")
lik_fun <- purrr::partial(.f = rlang::as_function(distribution), parameters$...)
return(lik_fun())
}
library(bayesplay)
data_model <- likelihood("student_t", d = mean/sd, n = n)
match.call()
library(bayesplay)
library(ggplot2)
library(tidyverse)
n = 10
library(bayesplay)
library(ggplot2)
library(tidyverse)
mean = 10
sd = 5
data_model <- likelihood("student_t", d = mean/sd, n = n)
data_model
h1 <- prior("cauchy", location = 0, scale = 1)
h0 <- prior("point", 0)
integrate(data_model * h1)  / integrate(data_model * h0)
library(bayesplay)
data_model <- likelihood("student_t", d = mean/sd, n = n)
data_model <- likelihood("student_t", d = mean/sd, n = n)
library(bayesplay)
library(bayesplay)
data_model <- likelihood("student_t", d = mean/sd, n = n)
#' Title
#'
#' @param distribution
#' @param ...
#'
#' @return
#' @export
#'
#' @examples
likelihood <- function(distribution) {
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(c("distribution"), names(mf), 0L)
mf <- mf[c(1L, m)]
parameters <- as.list(match.call(expand.dots = FALSE))
distribution <- paste0(parameters$distribution %||%
"normal", ".likelihood")
lik_fun <- purrr::partial(.f = rlang::as_function(distribution), parameters$...)
return(lik_fun())
}
rm(likelihood())
rm(likelihood)
data_model <- likelihood("student_t", d = mean/sd, n = n)
data_model <- likelihood("student_t", d = mean/sd, n = n)
data_model <- likelihood(distribution = "student_t", d = mean/sd, n = n)
#' Title
#'
#' @param distribution
#' @param ...
#'
#' @return
#' @export
#'
#' @examples
likelihood <- function(distribution, ...) {
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(c("distribution"), names(mf), 0L)
mf <- mf[c(1L, m)]
parameters <- as.list(match.call(expand.dots = FALSE))
distribution <- paste0(parameters$distribution %||%
"normal", ".likelihood")
lik_fun <- purrr::partial(.f = rlang::as_function(distribution), parameters$...)
return(lik_fun())
}
data_model <- likelihood(distribution = "student_t", d = mean/sd, n = n)
data_model
library(bayesplay)
library(ggplot2)
library(tidyverse)
h1 <- prior("cauchy", location = 0, scale = 1)
library(bayesplay)
library(ggplot2)
library(tidyverse)
h0 <- prior("point", 0)
integrate(data_model * h1)  / integrate(data_model * h0)
library(bayesplay)
n = 10
library(bayesplay)
library(ggplot2)
library(tidyverse)
mean = 10
sd = 5
data_model <- likelihood(distribution = "student_t", n = n, d = mean/sd)
h1 <- prior("cauchy", location = 0, scale = 1)
h0 <- prior("point", 0)
integrate(data_model * h1)  / integrate(data_model * h0)
BayesFactor::ttest.tstat(t = mean / (sd / sqrt(n)), n1 =  n, rscale = 1, simple = T)[[1]]
data_model <- likelihood(distribution = "student_t", n = n, d = mean/sd)
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(c("distribution"), names(mf), 0L)
mf <- mf[c(1L, m)]
cl
data_model <- likelihood("student_t", n = n, d = mean/sd)
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(c("distribution"), names(mf), 0L)
mf <- mf[c(1L, m)]
cl
match.call()
match.call(expand.dots = TRUE)
as.list(match.call(expand.dots = TRUE))
distribution
10 / 2
10 / 5
data_model <- likelihood(distribution = "student_t", n = n, d = mean/sd)
data_model <- likelihood(distribution = "student_t", n = n, d = mean/sd)
library(bayesplay)
env
env()
env$...
data
data$.env
data$`~`()
match.call()
data_model <- likelihood(distribution = "student_t", n = n, d = mean/sd)
match.call()
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(c("distribution"), names(mf), 0L)
mf <- mf[c(1L, m)]
cl
md
mf
parameters <- as.list(match.call(expand.dots = FALSE))
parameters
parameters <- as.list(match.call(expand.dots = TRUE))
parameters
parameters$n
data_model <- likelihood("student_t", n = n, d = mean/sd)
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(c("distribution"), names(mf), 0L)
mf <- mf[c(1L, m)]
cl
mf
m
mf
parameters
parameters <- as.list(match.call(expand.dots = FALSE))
parameters
parameters <- as.list(match.call(expand.dots = TRUE))
parameters
parameters[[2]]
