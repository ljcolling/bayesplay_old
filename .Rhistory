usethis::use_mit_license()
usethis::use_mit_license(name = "Lincoln J Colling")
# Set the licence
usethis::use_mit_license(name = "Lincoln J Colling")
usethis::use_roxygen_md()
devtools::document()
usethis::use_version("0.01")
usethis::use_version(major = 1)
?usethis::use_version
usethis::use_version("minor")
usethis::use_version("dev)
usethis::use_version("dev")
usethis::use_version("dev")
usethis::use_version("dev")
person("Lincoln","Colling","J")
person("Lincoln","Colling","J",email = "Lincoln@Colling.net.nz")
person("Lincoln","Colling","J",email = "Lincoln@Colling.net.nz",role = c("aut","cre"))
library(reverend)
?reverend
??reverend
reverend
packageDescription("reverend")
maintainer(reverend)
maintainer("reverend")
library(reverend)
library(bayesplay)
library(bayesplay)
set.seed(16)
x = rnorm(10,.8, 1)
data.model <- t.lik(center = mean(x) /sd(x), df = 9)
prior.eff <- function(theta.range){
list(func =
function(theta){dcauchy(theta, 0, 1 / sqrt(2))},
theta.range =
theta.range)}
prior.null <- function(theta.range){
list(func = function(theta){ifelse(theta == 0, 1, 0)},
theta.range =
theta.range)
}
alt = (data.model * prior.eff(theta.range = c(-Inf,Inf)))
data.model
prior.eff()
alt = (data.model * prior.eff(theta.range = c(-Inf,Inf)))
`*.likelihood` <-function(e1,e2){
theta.range = e2$theta.range
likelihood.func <- e1@func
prior.func <- e2$func
# normalise the pior
if(theta.range[1] != theta.range[2]){
K = suppressWarnings(1 / integrate(f = prior.func, lower = theta.range[1], upper = theta.range[2])$value)
} else{
K = 1
}
posterior <- function(theta){suppressWarnings(likelihood.func(theta = theta) * (K * prior.func(theta = theta)))}
if(theta.range[1] != theta.range[2]){
alt.val <- suppressWarnings(integrate(posterior,theta.range[1],theta.range[2])$value)
} else {
alt.val <- posterior(theta.range[[1]])
}
alt.func <- posterior
data = list(
integral = alt.val,
posterior = posterior,
prior.normalising.constant = K)
new(Class = 'posterior',
data = data,
K = K,
lik = likelihood.func,
prior = prior.func,
theta.range = theta.range)
}
alt = (data.model * prior.eff(theta.range = c(-Inf,Inf)))
null = (data.model * prior.null(theta.range = c(0,0)))
alt$integral/null$integral
BayesFactor::extractBF(BayesFactor::ttestBF(x = x), onlybf = T)
BayesFactor:::bf10_t(t = .7, ny = 10, nx = 10, independentSamples = T, prior.location = 0, prior.scale = 10, prior.df = 20)
alt$integral/null$integral
BayesFactor::extractBF(BayesFactor::ttestBF(x = x), onlybf = T)
library(bayesplay)
set.seed(16)
x = rnorm(10,.8, 1)
data.model <- t.lik(center = mean(x) /sd(x), df = 9)
prior.eff <- function(theta.range){
list(func =
function(theta){dcauchy(theta, 0, 1 / sqrt(2))},
theta.range =
theta.range)}
prior.null <- function(theta.range){
list(func = function(theta){ifelse(theta == 0, 1, 0)},
theta.range =
theta.range)
}
alt = (data.model * prior.eff(theta.range = c(-Inf,Inf)))
null = (data.model * prior.null(theta.range = c(0,0)))
alt$integral/null$integral
BayesFactor::extractBF(BayesFactor::ttestBF(x = x), onlybf = T)
require(tidyverse)
suppressMessages(require("tidyverse"))
suppressMessages(require(greta))
install.packages("patchwork")
library(bayesplay)
future::plan("single")
future::plan("singlesession")
future::sequential()
future::plan(sequential)
future::plan("sequential")
